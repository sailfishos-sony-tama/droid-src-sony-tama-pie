From 4ee3711165716947eb00423e8d74f22fdd8e852e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B6rn=20Bidar?= <theodorstormgrade@gmail.com>
Date: Sun, 18 Oct 2020 21:13:35 +0300
Subject: [PATCH 3/5] Revert "Handle updating the carrier configuration"

This reverts commit f475797d3c031ae97a393fa3e899034836fe7ba6.
---
 sdm845/core/ContextBase.cpp    |  4 ++--
 sdm845/core/LocAdapterBase.cpp |  7 +++----
 sdm845/core/LocAdapterBase.h   | 19 ++++---------------
 sdm845/core/LocApiBase.cpp     | 16 ++--------------
 sdm845/core/LocApiBase.h       |  5 ++---
 sdm845/etc/gps.conf            |  4 ++--
 sdm845/gnss/GnssAdapter.cpp    |  8 ++------
 7 files changed, 17 insertions(+), 46 deletions(-)

diff --git a/sdm845/core/ContextBase.cpp b/sdm845/core/ContextBase.cpp
index 5ddeeaf..35e6585 100644
--- a/sdm845/core/ContextBase.cpp
+++ b/sdm845/core/ContextBase.cpp
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2014,2016-2018 The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2014,2016-2017 The Linux Foundation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
@@ -96,7 +96,7 @@ void ContextBase::readConfig()
    mGps_conf.INTERMEDIATE_POS = 0;
    mGps_conf.ACCURACY_THRES = 0;
    mGps_conf.NMEA_PROVIDER = 0;
-   mGps_conf.GPS_LOCK = 0x03;
+   mGps_conf.GPS_LOCK = 0;
    mGps_conf.SUPL_VER = 0x10000;
    mGps_conf.SUPL_MODE = 0x1;
    mGps_conf.SUPL_ES = 0;
diff --git a/sdm845/core/LocAdapterBase.cpp b/sdm845/core/LocAdapterBase.cpp
index c6d21a0..12164c6 100644
--- a/sdm845/core/LocAdapterBase.cpp
+++ b/sdm845/core/LocAdapterBase.cpp
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2014, 2016-2018 The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2014, 2016-2017The Linux Foundation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
@@ -42,9 +42,8 @@ namespace loc_core {
 // But if getLocApi(targetEnumType target) is overriden,
 // the right locApi should get created.
 LocAdapterBase::LocAdapterBase(const LOC_API_ADAPTER_EVENT_MASK_T mask,
-                               ContextBase* context, bool isMaster,
-                               LocAdapterProxyBase *adapterProxyBase) :
-    mIsMaster(isMaster), mEvtMask(mask), mContext(context),
+                               ContextBase* context, LocAdapterProxyBase *adapterProxyBase) :
+    mEvtMask(mask), mContext(context),
     mLocApi(context->getLocApi()), mLocAdapterProxyBase(adapterProxyBase),
     mMsgTask(context->getMsgTask())
 {
diff --git a/sdm845/core/LocAdapterBase.h b/sdm845/core/LocAdapterBase.h
index 1ab6942..5fde5e7 100644
--- a/sdm845/core/LocAdapterBase.h
+++ b/sdm845/core/LocAdapterBase.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2014, 2016-2018 The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2014, 2016-2017 The Linux Foundation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
@@ -62,7 +62,6 @@ class LocAdapterProxyBase;
 class LocAdapterBase {
 private:
     static uint32_t mSessionIdCounter;
-    const bool mIsMaster;
 protected:
     LOC_API_ADAPTER_EVENT_MASK_T mEvtMask;
     ContextBase* mContext;
@@ -70,18 +69,12 @@ protected:
     LocAdapterProxyBase* mLocAdapterProxyBase;
     const MsgTask* mMsgTask;
     inline LocAdapterBase(const MsgTask* msgTask) :
-        mIsMaster(false), mEvtMask(0), mContext(NULL), mLocApi(NULL),
+        mEvtMask(0), mContext(NULL), mLocApi(NULL),
         mLocAdapterProxyBase(NULL), mMsgTask(msgTask) {}
-    LocAdapterBase(const LOC_API_ADAPTER_EVENT_MASK_T mask,
-        ContextBase* context, bool isMaster,
-        LocAdapterProxyBase *adapterProxyBase = NULL);
 public:
     inline virtual ~LocAdapterBase() { mLocApi->removeAdapter(this); }
-    inline LocAdapterBase(const LOC_API_ADAPTER_EVENT_MASK_T mask,
-                          ContextBase* context,
-                          LocAdapterProxyBase *adapterProxyBase = NULL) :
-        LocAdapterBase(mask, context, false, adapterProxyBase) {}
-
+    LocAdapterBase(const LOC_API_ADAPTER_EVENT_MASK_T mask,
+                   ContextBase* context, LocAdapterProxyBase *adapterProxyBase = NULL);
     inline LOC_API_ADAPTER_EVENT_MASK_T
         checkMask(LOC_API_ADAPTER_EVENT_MASK_T mask) const {
         return mEvtMask & mask;
@@ -122,10 +115,6 @@ public:
 
     uint32_t generateSessionId();
 
-    inline bool isAdapterMaster() {
-        return mIsMaster;
-    }
-
     // This will be overridden by the individual adapters
     // if necessary.
     inline virtual void setUlpProxyCommand(UlpProxyBase* ulp) {
diff --git a/sdm845/core/LocApiBase.cpp b/sdm845/core/LocApiBase.cpp
index c317d59..1eb2621 100644
--- a/sdm845/core/LocApiBase.cpp
+++ b/sdm845/core/LocApiBase.cpp
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2014, 2016-2018 The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2014, 2016-2017 The Linux Foundation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
@@ -142,18 +142,6 @@ LOC_API_ADAPTER_EVENT_MASK_T LocApiBase::getEvtMask()
     return mask & ~mExcludedMask;
 }
 
-bool LocApiBase::isMaster()
-{
-    bool isMaster = false;
-
-    for (int i = 0;
-            !isMaster && i < MAX_ADAPTERS && NULL != mLocAdapters[i];
-            i++) {
-        isMaster |= mLocAdapters[i]->isAdapterMaster();
-    }
-    return isMaster;
-}
-
 bool LocApiBase::isInSession()
 {
     bool inSession = false;
@@ -655,7 +643,7 @@ void LocApiBase::
 DEFAULT_IMPL()
 
 int LocApiBase::
-    getGpsLock(uint8_t /*subType*/)
+    getGpsLock()
 DEFAULT_IMPL(-1)
 
 LocationError LocApiBase::
diff --git a/sdm845/core/LocApiBase.h b/sdm845/core/LocApiBase.h
index aec1846..3b67abd 100644
--- a/sdm845/core/LocApiBase.h
+++ b/sdm845/core/LocApiBase.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2014, 2016-2018 The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2014, 2016-2017 The Linux Foundation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
@@ -98,7 +98,6 @@ protected:
     inline virtual ~LocApiBase() { close(); }
     bool isInSession();
     const LOC_API_ADAPTER_EVENT_MASK_T mExcludedMask;
-    bool isMaster();
 
 public:
     inline void sendMsg(const LocMsg* msg) const {
@@ -253,7 +252,7 @@ public:
       Current value of GPS Lock on success
       -1 on failure
      */
-    virtual int getGpsLock(uint8_t subType);
+    virtual int getGpsLock(void);
 
     virtual LocationError setXtraVersionCheck(uint32_t check);
     /*
diff --git a/sdm845/etc/gps.conf b/sdm845/etc/gps.conf
index 6cd410a..d30461e 100644
--- a/sdm845/etc/gps.conf
+++ b/sdm845/etc/gps.conf
@@ -34,8 +34,8 @@ INTERMEDIATE_POS=0
 # should be locked when user turns off GPS on Settings
 # Set bit 0x1 if MO GPS functionalities are to be locked
 # Set bit 0x2 if NI GPS functionalities are to be locked
-# default – both MO and NI locked for maximal privacy
-#GPS_LOCK = 3
+# default - non is locked for backward compatibility
+#GPS_LOCK = 0
 
 # supl version 1.0
 SUPL_VER=0x10000
diff --git a/sdm845/gnss/GnssAdapter.cpp b/sdm845/gnss/GnssAdapter.cpp
index 9cc4edf..80423b3 100644
--- a/sdm845/gnss/GnssAdapter.cpp
+++ b/sdm845/gnss/GnssAdapter.cpp
@@ -1,4 +1,4 @@
-/* Copyright (c) 2017-2018, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2017, The Linux Foundation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
@@ -64,7 +64,7 @@ GnssAdapter::GnssAdapter() :
                    LocDualContext::getLocFgContext(NULL,
                                                    NULL,
                                                    LocDualContext::mLocationHalName,
-                                                   false), true, nullptr),
+                                                   false)),
     mUlpProxy(new UlpProxyBase()),
     mUlpPositionMode(),
     mGnssSvIdUsedInPosition(),
@@ -770,10 +770,6 @@ GnssAdapter::gnssUpdateConfigCommand(GnssConfig config)
             if (mConfig.flags & GNSS_CONFIG_FLAGS_GPS_LOCK_VALID_BIT) {
                 uint32_t newGpsLock = mAdapter.convertGpsLock(mConfig.gpsLock);
                 ContextBase::mGps_conf.GPS_LOCK = newGpsLock;
-                if (0 == ContextBase::mGps_conf.GPS_LOCK) {
-                    // we should minimally lock MO
-                    ContextBase::mGps_conf.GPS_LOCK = 1;
-                }
                 if (0 == mAdapter.getPowerVoteId()) {
                     err = mApi.setGpsLock(mConfig.gpsLock);
                 }
-- 
2.28.0

